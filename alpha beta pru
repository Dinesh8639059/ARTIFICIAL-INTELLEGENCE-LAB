def print_board(board):
    for row in board:
        print(" ".join(row))
    print()

def evaluate(board):
    for line in board + list(zip(*board)):
        if "X X X" in " ".join(line):
            return 10
        if "O O O" in " ".join(line):
            return -10

    if any(board[i][i] != "X" for i in range(3)) and any(board[i][i] != "O" for i in range(3)):
        if board[0][0] == board[1][1] == board[2][2] == "X" or board[0][2] == board[1][1] == board[2][0] == "X":
            return 10
        if board[0][0] == board[1][1] == board[2][2] == "O" or board[0][2] == board[1][1] == board[2][0] == "O":
            return -10

    return 0

def is_full(board):
    return all(cell != " " for row in board for cell in row)

def minimax(board, depth, is_max, alpha, beta):
    score = evaluate(board)
    if score != 0:
        return score

    if is_full(board):
        return 0

    if is_max:
        best = -1000
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "X"
                    best = max(best, minimax(board, depth + 1, not is_max, alpha, beta))
                    board[i][j] = " "
                    alpha = max(alpha, best)
                    if beta <= alpha:
                        break
        return best
    else:
        best = 1000
        for i in range(3):
            for j in range(3):
                if board[i][j] == " ":
                    board[i][j] = "O"
                    best = min(best, minimax(board, depth + 1, not is_max, alpha, beta))
                    board[i][j] = " "
                    beta = min(beta, best)
                    if beta <= alpha:
                        break
        return best

def find_best_move(board):
    best_val = -1000
    best_move = (-1, -1)
    alpha = -1000
    beta = 1000

    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "X"
                move_val = minimax(board, 0, False, alpha, beta)
                board[i][j] = " "
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
                alpha = max(alpha, best_val)

    return best_move

def main():
    board = [[" " for _ in range(3)] for _ in range(3)]
    print("Tic-Tac-Toe - Alpha-Beta Pruning AI")
    print_board(board)

    while True:
        x, y = map(int, input("Enter your move (row and column): ").split())
        if board[x][y] != " ":
            print("Invalid move. Try again.")
            continue
        board[x][y] = "O"
        print_board(board)

        if evaluate(board) == -10:
            print("You win!")
            break

        if is_full(board):
            print("It's a draw!")
            break

        best_move = find_best_move(board)
        print("AI's move:", best_move)
        board[best_move[0]][best_move[1]] = "X"
        print_board(board)

        if evaluate(board) == 10:
            print("AI wins!")
            break

        if is_full(board):
            print("It's a draw!")
            break

if __name__ == "__main__":
    main()
